swagger: "2.0"
info:
  title: map.ingest.api
  description: The API for map data ingestion
  version: "1.0.0"
basePath: ""
schemes:
  - "http"
  - "https"
paths:
  /agents:
    get:
      tags:
        - Agents
      summary: Retrieves registered and accessible agents
      description: Retrieves all previously registered and accessible agents
      operationId: GetAgents
      parameters:
        - $ref: "#/parameters/skip"
        - $ref: "#/parameters/limit"
      responses:
        200:
          description: The requested page of accessible agents (OK)
          schema:
            $ref: '#/definitions/AgentPage'
        400:
          schema:
            $ref: '#/definitions/ProblemReport'
        401:
          schema:
            $ref: '#/definitions/ProblemReport'
        500:
          schema:
            $ref: '#/definitions/ProblemReport'
    post:
      tags:
        - Agents
      summary: Registers a new agent
      description: >
        Registers a new agent with the given detailed data. Enables the agent to post map data using the assigned ID from response body.
      operationId: RegisterAgent
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data: 
                  $ref: '#/definitions/AgentData'
      responses:
        '200':
          description: Agent registration finished result
          schema:
            $ref: '#/definitions/Agent'
        '400':
          schema:
            $ref: '#/definitions/ProblemReport'
        '401':
          schema:
            $ref: '#/definitions/ProblemReport'
        '500':
          schema:
            $ref: '#/definitions/ProblemReport'
  '/agents/{ID}':
    get:
      tags:
        - Agent Data
      summary: Returns agent details
      description: >
        Retrieves the detailed data for the agent represented by {ID} in the system.
      operationId: GetAgentData
      parameters:
        - $ref: "#/parameters/ID"
      responses:
        '200':
          description: response
          content:
            application/json:
              schema:
                $ref: '#/definitions/AgentData'
        '400':
          schema:
            $ref: '#/definitions/ProblemReport'
        '401':
          schema:
            $ref: '#/definitions/ProblemReport'
        '404':
          schema:
            $ref: '#/definitions/ProblemReport'
        '500':
          schema:
            $ref: '#/definitions/ProblemReport'
    patch:
      tags:
        - Agent Data
      summary: Updates agent details
      description: >
        Updates the detailed data for the agent represented by {ID} in the system.
      operationId: SetAgentData
      parameters:
        - $ref: "#/parameters/ID"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data: 
                  $ref: '#/definitions/AgentData'
      responses:
        '200':
          description: Agent detail update finished result
          schema:
            $ref: '#/definitions/AgentID'
        '400':
          schema:
            $ref: '#/definitions/ProblemReport'
        '401':
          schema:
            $ref: '#/definitions/ProblemReport'
        '500':
          schema:
            $ref: '#/definitions/ProblemReport'
    delete:
      tags:
        - Agent Data
      summary: Deletes agent details
      description: >
        Deletes the detailed data for the agent represented by {ID} in the system. The agent is unregistered from the system and no longer able to post map data. Already posted map data remains accessible to system.
      operationId: DeleteAgentData
      parameters:
        - $ref: "#/parameters/ID"
      responses:
        '200':
          description: Agent details have been deleted (OK)
          schema:
            $ref: '#/definitions/AgentID'
        '400':
          schema:
            $ref: '#/definitions/ProblemReport'
        '401':
          schema:
            $ref: '#/definitions/ProblemReport'
        '404':
          schema:
            $ref: '#/definitions/ProblemReport'
        '500':
          schema:
            $ref: '#/definitions/ProblemReport'
  '/agents/{ID}/maps':
    post:
      tags:
        - Map Data
      summary: Posts new local map to the system
      description: >
        Posts a new local map to the system using the given bounded context. The context describes the spatial and temporal extension of the local data.
      operationId: AddMapData
      parameters:
        - $ref: "#/parameters/ID"
        - $ref: "#/parameters/fromLon"
        - $ref: "#/parameters/toLon"
        - $ref: "#/parameters/fromLat"
        - $ref: "#/parameters/toLat"
        - $ref: "#/parameters/fromTime"
        - $ref: "#/parameters/toTime"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                mapData: 
                  $ref: '#/definitions/EncodedMapData'
      responses:
        '200':
          description: Local map data add result
          schema:
            $ref: '#/definitions/AgentID'
        '400':
          schema:
            $ref: '#/definitions/ProblemReport'
        '401':
          schema:
            $ref: '#/definitions/ProblemReport'
        '404':
          schema:
            $ref: '#/definitions/ProblemReport'
        '500':
          schema:
            $ref: '#/definitions/ProblemReport'
    patch:
      tags:
        - Map Data
      summary: Updates existing local map in the system
      description: >
        Updates an existing local map to the system re-using a previous bounded context. The context describes the spatial and temporal extension of the local data.
      operationId: UpdateMapData
      parameters:
        - $ref: "#/parameters/ID"
        - $ref: "#/parameters/fromLon"
        - $ref: "#/parameters/toLon"
        - $ref: "#/parameters/fromLat"
        - $ref: "#/parameters/toLat"
        - $ref: "#/parameters/fromTime"
        - $ref: "#/parameters/toTime"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                mapData: 
                  $ref: '#/definitions/EncodedMapData'
      responses:
        '200':
          description: Local map data update result
          schema:
            $ref: '#/definitions/AgentID'
        '400':
          schema:
            $ref: '#/definitions/ProblemReport'
        '401':
          schema:
            $ref: '#/definitions/ProblemReport'
        '404':
          schema:
            $ref: '#/definitions/ProblemReport'
        '500':
          schema:
            $ref: '#/definitions/ProblemReport'
parameters:
  skip:
    name: skip
    in: query
    description: Number of agents to skip
    required: false
    type: integer
    format: int32
    minimum: 0
    default: 10
  limit:
    name: limit
    in: query
    description: Maximum number of agents to return
    required: false
    type: integer
    format: int32
    minimum: 1
    default: 10
  ID:
    name: ID
    in: path
    required: true
    type: string
    readOnly: true
    format: uuid
  fromLon:
    name: fromLon
    in: query
    required: true
    type: number
    format: float
    minimum: -180.0
    maximum: 180.0
  toLon:
    name: toLon
    in: query
    required: true
    type: number
    format: float
    minimum: -180.0
    maximum: 180.0
  fromLat:
    name: fromLat
    in: query
    required: true
    type: number
    format: float
    minimum: -90.0
    maximum: 90.0
  toLat:
    name: toLat
    in: query
    required: true
    type: number
    format: float
    minimum: -90.0
    maximum: 90.0
  fromTime:
    name: fromTime
    in: query
    required: true
    type: string
    format: date-time
  toTime:
    name: toTime
    in: query
    required: true
    type: string
    format: date-time
definitions:
  ProblemReport:
    description: Problem details report as described by RFC 7807
    type: object
    readOnly: true
    properties:
      type:
        description: Absolute URI [RFC3986] that identifies the problem type
        example: "https://azure.com/stargazer/map.ingest/R3415726"
        type: string
        format: uri
      title:
        description: Short, human-readable summary of the problem type
        example: "Request could not be understood by the server"
        type: string
      status:
        description: HTTP status code.
        example: 400
        type: integer
      detail:
        description: Human readable explanation specific to this occurrence of the problem
        example: "Request contains unexpected parameter(s) [xyz=abc]"
        type: string
  AgentID:
    description: Universally unique identifier as described by RFC 4122
    example: "0729a580-2240-11e6-9eb5-0002a5d5c51b"
    type: string
    readOnly: true
    format: uuid
  Sensor:
    description: Information associated to an installed sensor
    type: object
    readOnly: true
    properties:
      type: 
        description: Type of installed sensor
        type: string
        enum: [camera, gps, lidar, radar]
      details:
        description: The sensors details, e.g. information quality (TBD)
        type: string
  AgentData:
    description: Detailed data associated to a registered agent (TBD)
    type: object
    readOnly: true
    properties:
      group:
        description: Agent group determining its associated context
        type: string
        example: "fleet/ABC"
      type: 
        description: Archetype of agent determining its movement capabilities
        type: string
        example: "vehicle"
      sensors:
        description: List of available sensors determining agents perception capabilities
        type: array
        items:
            $ref: '#/definitions/Sensor'
  Agent:
    type: object
    readOnly: true
    properties:
      id: 
        $ref: '#/definitions/AgentID'
      data:
        description: Relative URI (as of RFC 3986) to agent data interface
        example: "/agents/0729a580-2240-11e6-9eb5-0002a5d5c51b"
        type: string
        format: uri
      maps: 
        description: Relative URI (as of RFC 3986) to map data interface
        example: "/agents/0729a580-2240-11e6-9eb5-0002a5d5c51b/maps"
        type: string
        format: uri  
  AgentPage:
    description: Forward-linked page of accessible agents
    type: object
    readOnly: true
    properties:
      agents:
        description: Range of IDs representing a page of accessible agents.
        type: array
        items:
            $ref: '#/definitions/Agent'
      next: 
        description: Relative URI (as of RFC 3986) to next page of data 
        example: "/agents?skip=5&limit=5"
        type: string
        format: uri
  EncodedMapData:
    description: Encoded map data
    type : object
    readOnly: true
    properties:
      decoder:
          description: Absolute URI [RFC3986] that identifies the map data decoder
          example: "https://azure.com/stargazer/map.ingest/decoders/json-fast-slam"
          type: string
          format: uri
      data:
        description: Map data blob
        type: string
        format: binary